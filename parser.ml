type token =
  | COMMA
  | SEMI
  | COLON
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | EOF
  | PLUS
  | MINUS
  | MULT
  | DIV
  | MOD
  | ASSIGN
  | EQUAL
  | LESS
  | GREATER
  | LEQ
  | GEQ
  | NEQ
  | IN
  | LET
  | INTLIT of (int)
  | FLOATLIT of (float)
  | ID of (string)
  | STRINGLIT of (string)
  | CHARLIT of (char)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 37 "parser.ml"
let yytransl_const = [|
  257 (* COMMA *);
  258 (* SEMI *);
  259 (* COLON *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* LBRACE *);
  265 (* RBRACE *);
    0 (* EOF *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* MULT *);
  269 (* DIV *);
  270 (* MOD *);
  271 (* ASSIGN *);
  272 (* EQUAL *);
  273 (* LESS *);
  274 (* GREATER *);
  275 (* LEQ *);
  276 (* GEQ *);
  277 (* NEQ *);
  278 (* IN *);
  279 (* LET *);
    0|]

let yytransl_block = [|
  280 (* INTLIT *);
  281 (* FLOATLIT *);
  282 (* ID *);
  283 (* STRINGLIT *);
  284 (* CHARLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\005\000\006\000\006\000\006\000\004\000\000\000"

let yylen = "\002\000\
\001\000\003\000\003\000\003\000\003\000\003\000\001\000\004\000\
\001\000\001\000\001\000\001\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\011\000\012\000\015\000\001\000\
\000\000\009\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\002\000\003\000\
\004\000\005\000\006\000\014\000\008\000"

let yydgoto = "\002\000\
\007\000\008\000\009\000\014\000\010\000\011\000"

let yysindex = "\003\000\
\252\254\000\000\252\254\232\254\000\000\000\000\000\000\000\000\
\253\254\000\000\000\000\254\254\247\254\251\254\252\254\252\254\
\252\254\252\254\252\254\000\000\252\254\252\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\002\000\253\255\000\000\000\000\000\000\000\000"

let yytablesize = 279
let yytable = "\003\000\
\007\000\013\000\020\000\001\000\012\000\021\000\015\000\016\000\
\017\000\018\000\019\000\023\000\024\000\025\000\026\000\027\000\
\022\000\000\000\004\000\005\000\000\000\006\000\028\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000"

let yycheck = "\004\001\
\000\000\026\001\005\001\001\000\003\000\015\001\010\001\011\001\
\012\001\013\001\014\001\015\000\016\000\017\000\018\000\019\000\
\022\001\255\255\023\001\024\001\255\255\026\001\021\000\022\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001"

let yynames_const = "\
  COMMA\000\
  SEMI\000\
  COLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  EOF\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  MOD\000\
  ASSIGN\000\
  EQUAL\000\
  LESS\000\
  GREATER\000\
  LEQ\000\
  GEQ\000\
  NEQ\000\
  IN\000\
  LET\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  ID\000\
  STRINGLIT\000\
  CHARLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infixexp) in
    Obj.repr(
# 24 "parser.mly"
           ( Infix _1 )
# 222 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixexp) in
    Obj.repr(
# 27 "parser.mly"
                       ( InfixOp(_1, Add, _3) )
# 230 "parser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixexp) in
    Obj.repr(
# 28 "parser.mly"
                        ( InfixOp(_1, Sub, _3) )
# 238 "parser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixexp) in
    Obj.repr(
# 29 "parser.mly"
                       ( InfixOp(_1, Mul, _3) )
# 246 "parser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixexp) in
    Obj.repr(
# 30 "parser.mly"
                      ( InfixOp(_1, Div, _3) )
# 254 "parser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'infixexp) in
    Obj.repr(
# 31 "parser.mly"
                      ( InfixOp(_1, Mod, _3) )
# 262 "parser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lexp) in
    Obj.repr(
# 32 "parser.mly"
         ( LetExpr _1 )
# 269 "parser.ml"
               : 'infixexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 36 "parser.mly"
                      ( LetExpr(_2, _4))
# 277 "parser.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fexp) in
    Obj.repr(
# 37 "parser.mly"
         ( FunctionApp _1 )
# 284 "parser.ml"
               : 'lexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 40 "parser.mly"
         ( ArgExp _1 )
# 291 "parser.ml"
               : 'fexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 43 "parser.mly"
           ( IntLit _1 )
# 298 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 44 "parser.mly"
       ( Var _1 )
# 305 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 45 "parser.mly"
                       ( ParenExp _2)
# 312 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 48 "parser.mly"
                   ( Assign(_1, _3))
# 320 "parser.ml"
               : 'decls))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
