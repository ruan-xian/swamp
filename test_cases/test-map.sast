(list<int> : let onion map = (((int -> int), list<int> -> list<int>) : fun(op:(int -> int), l:list<int>) -> (list<int> : if (bool : isEmpty (list<int> : l)) then (list<int> : []) else (list<int> : (int : ((int -> int) : op)((int : head (list<int> : l)))) :: (list<int> : (((int -> int), list<int> -> list<int>) : map)(((int -> int) : op), (list<int> : tail (list<int> : l))))))) in (list<int> : let onion fibonacci = ((int, int, int -> int) : fun(n:int, a:int, b:int) -> (int : if (bool : (int : n) = (int : 0)) then (int : a) else (int : if (bool : (int : n) = (int : 1)) then (int : b) else (int : ((int, int, int -> int) : fibonacci)((int : (int : n) - (int : 1)), (int : b), (int : (int : a) + (int : b))))))) in (list<int> : let onion count = ((int, int -> list<int>) : fun(min:int, max:int) -> (list<int> : if (bool : (int : min) = (int : max)) then (list<int> : []) else (list<int> : (int : min) :: (list<int> : ((int, int -> list<int>) : count)((int : (int : min) + (int : 1)), (int : max)))))) in (list<int> : (((int -> int), list<int> -> list<int>) : map)(((int -> int) : fun(x:int) -> (int : ((string -> int) : shreksays)((string : (string : ((int -> string) : int_to_string)((int : ((int, int, int -> int) : fibonacci)((int : x), (int : 0), (int : 1))))) + (string :  ))))), (list<int> : ((int, int -> list<int>) : count)((int : 0), (int : 15))))))))
