(int : let onion fold_left = (((int, int -> int), int, list<int> -> int) : fun(op:(int, int -> int), acc:int, l:list<int>) -> (int : if (bool : isEmpty (list<int> : l)) then (int : acc) else (int : (((int, int -> int), int, list<int> -> int) : fold_left)(((int, int -> int) : op), (int : ((int, int -> int) : op)((int : acc), (int : head (list<int> : l)))), (list<int> : tail (list<int> : l)))))) in (int : let plus = ((int, int -> int) : fun(a:int, b:int) -> (int : (int : a) + (int : b))) in (int : let res = (int : (((int, int -> int), int, list<int> -> int) : fold_left)(((int, int -> int) : plus), (int : 0), (list<int> : [(int : 1);(int : 2);(int : 3);(int : 4);(int : 5)]))) in (int : ((string -> int) : shreksays)((string : (string : ((int -> string) : int_to_string)((int : res))) + (string : 
)))))))
